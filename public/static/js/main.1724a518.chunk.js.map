{"version":3,"sources":["config/auth.js","components/NavBar.js","components/UserComp/LoginForm.js","components/InventoryComp/ShopDisplay.js","pages/Home.js","components/InventoryComp/InventoryForm.js","components/InventoryComp/InventoryDisplay.js","pages/Inventory.js","components/UserComp/ProfileForm.js","pages/Profile.js","components/InventoryComp/CartDisplay.js","pages/Cart.js","components/UserComp/SignupForm.js","pages/Signup.js","components/ShopRouter.js","App.js","extras/serviceWorker.js","index.js"],"names":["isLoggedIn","localStorage","getItem","NavBar","logBtn","loggedIn","setLoggedIn","handleLogout","removeItem","window","location","reload","Button","className","onClick","color","to","LoginForm","useState","username","setUsername","password","setPassword","remembered","setRemembered","msg","setMsg","displaySpinner","setSpinner","useEffect","localUsername","form","spinner","Form","onSubmit","event","preventDefault","setItem","fetch","method","headers","body","JSON","stringify","then","response","token","status","get","Input","type","value","placeholder","onChange","target","FormGroup","name","checked","Label","for","block","style","Spinner","ShopDisplay","inventory","setInv","filterModal","setFModal","cart","setCart","getInv","json","inv","handleSort","sortMethod","sortedInv","Object","assign","sort","a","b","quantity","price","handleCart","id","added","changedCart","concat","cartArray","split","filter","cartID","forEach","displayInv","map","item","addToCart","removeFromCart","inCart","CartID","_id","isActive","Card","key","CardHeader","CardBody","desc","seller","CardFooter","toggleModal","Modal","isOpen","toggle","ModalHeader","ModalBody","CardDeck","Home","InventoryForm","myItem","setUpdate","formName","formDesc","formCount","formPrice","modalOpen","setName","setDesc","setCount","setPrice","modal","setModal","userInfo","renderSubmit","cancel","formHeader","closeForm","updatedItem","res","console","log","invCopy","index","modifiedItem","addedItem","push","insertedItem","required","min","step","InventoryDisplay","isUpdate","itemToUpdate","setItemToUpdate","displayActive","setActive","displayInactive","setInactive","getUserInfo","toggleActive","newActiveStatus","InvCopy","deleteButton","activeButton","deletedItem","handleUpdate","renderForm","activeBtn","inactiveBtn","Inventory","ProfileForm","updateProfile","bio","setBio","setPic","user","src","alt","Profile","setUser","newBio","newPic","pic","img","Media","object","left","heading","toUpdate","CartDisplay","cartItems","setCartItems","total","setTotal","getTotal","invInCart","keep","itemID","myTotal","parseFloat","Table","striped","Cart","SignupForm","setUserName","email","setEmail","pswrdconfirm","setConfirm","usernameTaken","setTaken","onBlur","fetchMsg","length","Signup","PrivateRoute","children","rest","render","pathname","state","from","ShopRouter","exact","path","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1724a518.chunk.js","sourcesContent":["// Returns token if it exists \r\nexport const isLoggedIn = () => {\r\n    const token = localStorage.getItem('auth');\r\n    return token;\r\n}\r\n// Removes token from LocalStorage\r\nexport const logout = () => {\r\n    localStorage.removeItem('auth');\r\n    localStorage.removeItem(\"Cart\");\r\n    window.location.reload(false);\r\n}\r\n// Stores the Auth Token in LocalStorage\r\nexport const setToken = (token) => {\r\n    localStorage.setItem('auth', token);\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from 'reactstrap';\r\nimport '../stylesheets/NavBar.css';\r\nimport {logout} from '../config/auth';\r\n\r\nconst NavBar = ({loggedIn, setLoggedIn}) =>{\r\n    let logBtn;\r\n    const handleLogout = () => {\r\n        logout();\r\n        setLoggedIn(false);\r\n    }\r\n    if(loggedIn) {\r\n        logBtn = <Button className=\"NavLink\" onClick={() => handleLogout()} color=\"primary\">Logout</Button>\r\n    } else {\r\n        logBtn = <Link to='/signup' className=\"NavLink\">Register</Link>\r\n    }\r\n    return(\r\n        <nav>\r\n            <Link to='/' className=\"NavLink\">Home</Link>\r\n            <Link to='/profile' className=\"NavLink\">Profile</Link>\r\n            <Link to='/inventory' className=\"NavLink\">Inventory</Link>\r\n            <Link to='/cart' className=\"NavLink\">Cart</Link>\r\n            {logBtn}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, {useState, useEffect} from 'react';\r\nimport {Form, FormGroup, Input, Label, Button, Spinner} from 'reactstrap';\r\nimport {setToken, isLoggedIn} from '../../config/auth';\r\n\r\nconst LoginForm = ({loggedIn, setLoggedIn}) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [remembered, setRemembered] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    useEffect(() => {\r\n        const localUsername = localStorage.getItem('username');\r\n        if(localUsername) {\r\n            setUsername(localUsername);\r\n            setRemembered(true);\r\n        }\r\n    }, []);\r\n    const toggleRemembered = () => {\r\n        setRemembered(!remembered);\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg('');\r\n        if(remembered) {\r\n            localStorage.setItem('username', username);\r\n        } else {\r\n            localStorage.removeItem('username');\r\n        }\r\n        fetch(\"https://shop-jpeavler.herokuapp.com/api/auth/login\", {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password})\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                setToken(response.headers.get('authentication'));\r\n                setLoggedIn(isLoggedIn());\r\n            } else {\r\n                setMsg('Login Failed');\r\n            }\r\n            setSpinner(false);\r\n        })\r\n    }\r\n    let form;\r\n    if(!loggedIn) {\r\n        form = <Form onSubmit={handleSubmit}>\r\n                    <h3>Login</h3>\r\n                    <Input type=\"text\" value={username} placeholder=\"Username\" \r\n                            onChange={({target}) => setUsername(target.value)}/>\r\n                    <Input type=\"password\" value={password} placeholder=\"Password\" \r\n                            onChange={({target}) => setPassword(target.value)}/>\r\n                    <FormGroup>\r\n                        <Input type=\"checkbox\" name=\"remember\" checked={remembered} \r\n                            onChange={toggleRemembered}/>\r\n                        <Label for=\"remember\">Remember Me</Label>\r\n                    </FormGroup>\r\n                    <Button block>Login</Button>\r\n                    <span style={{'color': 'red'}}>{msg}</span>\r\n                </Form>\r\n    } else {\r\n        form = <div>Signed In</div>\r\n    }\r\n    let spinner;\r\n    if (displaySpinner) {spinner = <Spinner color='primary'/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>{form}{spinner}</>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\n\r\nconst ShopDisplay = () => {\r\n    if(!localStorage.getItem(\"Cart\")){localStorage.setItem(\"Cart\", \"\")}\r\n    const [inventory, setInv] = useState([]);\r\n    const [filterModal, setFModal] = useState(false);\r\n    const [cart, setCart] = useState(localStorage.getItem(\"Cart\"));\r\n\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod === \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod === \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const handleCart = (id, added) => {\r\n        let changedCart = cart;\r\n        if(added) {\r\n            changedCart = changedCart.concat(id, \",\");\r\n        } else {\r\n            let cartArray = changedCart.split(',');\r\n            cartArray = cartArray.filter((cartID) => id !== cartID);\r\n            changedCart = \"\";\r\n            cartArray.forEach((cartID) => {\r\n                if(cartID !== \"\"){\r\n                    changedCart = changedCart.concat(cartID, \",\")\r\n                }\r\n            })\r\n        }\r\n        setCart(changedCart);\r\n        localStorage.setItem('Cart', changedCart);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let addToCart;\r\n        let removeFromCart;\r\n        let cartArray = cart.split(','); \r\n        let inCart = false;\r\n        cartArray.forEach((CartID) => {\r\n            if(item._id === CartID) {\r\n                inCart = true\r\n            }\r\n        });\r\n        if(isLoggedIn()) {\r\n            if(inCart) {\r\n                removeFromCart = <Button color=\"primary\" onClick={() => handleCart(item._id, false)} block>Remove From Cart</Button>\r\n            } else {\r\n                addToCart = <Button color=\"primary\" onClick={() => handleCart(item._id, true)} block>Add To Cart</Button>\r\n            }\r\n        }\r\n        if(item.isActive) {\r\n            return (\r\n                <Card key={item._id} className=\"item\">\r\n                    <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                    <CardBody>\r\n                        <p className=\"price\">Price: ${item.price}</p>\r\n                        <p className=\"quantity\">Count: {item.quantity}</p>\r\n                        <p className=\"description\">{item.desc}</p>\r\n                        <p className=\"Seller\">Seller: {item.seller}</p>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        {addToCart}\r\n                        {removeFromCart}\r\n                    </CardFooter>\r\n                </Card>\r\n            )\r\n        } else {return null;}\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h2>Marketplace</h2>\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                    <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                    <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                    <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default ShopDisplay;","import React, {useState} from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport LoginForm from '../components/UserComp/LoginForm';\r\nimport ShopDisplay from '../components/InventoryComp/ShopDisplay';\r\nimport {isLoggedIn} from '../config/auth'\r\n\r\nconst Home = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"home\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <LoginForm loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <ShopDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, Form, Input, Button} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\n\r\nconst InventoryForm = ({myItem, id, inventory, setInv, setUpdate}) => {\r\n    let formName = myItem ? myItem.name : \"\";\r\n    let formDesc = myItem ? myItem.desc : \"\";\r\n    let formCount = myItem ? myItem.quantity : \"\";\r\n    let formPrice = myItem ? myItem.price : \"\";\r\n    let modalOpen = myItem ? true : false;\r\n    const [name, setName] = useState(formName);\r\n    const [desc, setDesc] = useState(formDesc);\r\n    const [quantity, setCount] = useState(formCount);\r\n    const [price, setPrice] = useState(formPrice);\r\n    const [modal, setModal] = useState(modalOpen);\r\n    const [username, setUsername] = useState('');\r\n\r\n    const getUserInfo = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/auth/id/${isLoggedIn()}`)\r\n        .then(response => response.json()).then(userInfo => setUsername(userInfo.username))\r\n    }\r\n    useEffect(() => {\r\n        getUserInfo();\r\n    }, [])\r\n    const closeForm = () => {\r\n        setName(\"\");\r\n        setDesc(\"\");\r\n        setCount(\"\");\r\n        setPrice(\"\");\r\n        setModal(!modal);\r\n        setUpdate(false);\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let isActive = true;\r\n        let seller = username;\r\n        if(myItem) {\r\n            isActive = myItem.isActive;\r\n            const updatedItem = {name, desc, quantity, price, isActive, seller};\r\n            fetch(`https://shop-jpeavler.herokuapp.com/api/inventory/${id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(updatedItem)\r\n            })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                console.log(\"Response from Backend\", res);\r\n                let invCopy = [...inventory];\r\n                invCopy.forEach((item, index) => {\r\n                    if(item._id === res.modifiedItem._id) {\r\n                        invCopy[index] = res.modifiedItem;\r\n                    }\r\n                })\r\n                console.log(\"InvCopy after change\", invCopy);\r\n                setInv(invCopy);\r\n            })\r\n            .then(() => closeForm())\r\n        } else {\r\n            const addedItem = {name, desc, quantity, price, isActive, seller};\r\n            fetch(`https://shop-jpeavler.herokuapp.com/api/inventory`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(addedItem)\r\n            })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                console.log(\"Response from Backend\", res);\r\n                let invCopy = [...inventory];\r\n                invCopy.push(res.insertedItem);\r\n                setInv(invCopy);\r\n            })\r\n            .then(() => closeForm())\r\n        }\r\n    }\r\n    const toggle = () => setModal(!modal);\r\n    let renderSubmit;\r\n    let cancel;\r\n    let formHeader;\r\n    if(myItem) {\r\n        renderSubmit = <Button color=\"primary\" key=\"edit\" type=\"submit\" block>Edit Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceledit\" onClick={() => closeForm()} block>Cancel Edit</Button>\r\n        formHeader = <ModalHeader key=\"edithead\">Edit Item: {myItem.name}</ModalHeader>\r\n    } else {\r\n        renderSubmit = <Button color=\"primary\" key=\"add\" type=\"submit\" block>Add Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceladd\" onClick={toggle} block>Cancel Add</Button>\r\n        formHeader = <ModalHeader key=\"addhead\">Add a New Item</ModalHeader>\r\n    }\r\n    return (\r\n        <><Button color=\"primary\" className=\"topbtn\" onClick={toggle}>Add New Item</Button>\r\n        <Modal isOpen={modal} toggle={toggle} className=\"modelform\">\r\n            {formHeader}\r\n            <ModalBody>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Input placeholder=\"Item Name\" value={name} \r\n                    type=\"text\" onChange={({target}) => setName(target.value)} required/>\r\n                <Input type=\"textarea\" placeholder=\"Description\" value={desc} \r\n                    onChange={({target}) => setDesc(target.value)}/>\r\n                <Input placeholder=\"Item Count\" value={quantity} type=\"number\" \r\n                    onChange={({target}) => setCount(target.value)} required/>\r\n                <Input placeholder=\"Price\" value={price}\r\n                    type=\"number\" min=\".01\" step=\".01\" \r\n                    onChange={({target}) => setPrice(target.value)} required/>\r\n                {renderSubmit}\r\n                {cancel}\r\n            </Form>\r\n            </ModalBody>\r\n        </Modal></>\r\n    )\r\n}\r\n\r\nexport default InventoryForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\nimport InventoryForm from './InventoryForm';\r\n\r\nconst InventoryDisplay = () => {\r\n    const [inventory, setInv] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(false);\r\n    const [itemToUpdate, setItemToUpdate] = useState('');\r\n    const [displayActive, setActive] = useState(true);\r\n    const [displayInactive, setInactive] = useState(true);\r\n    const [filterModal, setFModal] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n\r\n    useEffect(() => {\r\n        getUserInfo();\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n            .then(() => setUpdate(false)).then(() => setItemToUpdate(''))\r\n    }\r\n    const getUserInfo = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/auth/id/${isLoggedIn()}`)\r\n        .then(response => response.json()).then(userInfo => setUsername(userInfo.username))\r\n    }\r\n    const handleUpdate = (item) => {\r\n        setItemToUpdate(item);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/inventory/${id}`, {\r\n            method: 'DELETE'\r\n        })\r\n        .then(response => response.json())\r\n        .then(res => {\r\n            console.log(\"Result from fetch: \", res);\r\n            let InvCopy = [...inventory];\r\n            console.log(\"Before filter\", InvCopy);\r\n            console.log(\"result deleted item:\", res.deletedItem);\r\n            InvCopy = InvCopy.filter(item => item._id !== res.deletedItem._id);\r\n            console.log(\"After filter\", InvCopy);\r\n            setInv(InvCopy);\r\n            return InvCopy;\r\n        })\r\n    }\r\n    const toggleActive = (id, isActive) => {\r\n        const newActiveStatus = {isActive};\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/inventory/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newActiveStatus)\r\n        })\r\n        .then(response => response.json())\r\n        .then(res => {\r\n            console.log(\"Is Active\", res.modifiedItem.isActive);\r\n            console.log(\"Item ID to change:\", res.modifiedItem._id);\r\n            let InvCopy = [...inventory];\r\n            InvCopy.forEach(item => {\r\n                if(item._id === res.modifiedItem._id) {\r\n                    console.log(res.modifiedItem);\r\n                    item.isActive = res.modifiedItem.isActive;\r\n                }\r\n            });\r\n            console.log(\"InvCopy after attempt to update\", InvCopy);\r\n            setInv(InvCopy);\r\n        })\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod === \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod === \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let activeButton = item.isActive ? \r\n            <Button color=\"warning\" onClick={() => toggleActive(item._id, false)} block>Deactivate</Button>\r\n            : <Button color=\"success\" onClick={() => toggleActive(item._id, true)} block>Activate</Button>\r\n        let deleteButton;\r\n        if(!item.isActive) {\r\n            deleteButton = <Button color=\"danger\" onClick={() => handleDelete(item._id)} block>Delete</Button>      \r\n        }\r\n        if(item.seller === username) {\r\n            if((item.isActive && displayActive) || (!item.isActive && displayInactive)) {\r\n                return (\r\n                    <Card key={item._id} className=\"item\">\r\n                        <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                        <CardBody>\r\n                            <p className=\"price\">Price: ${item.price}</p>\r\n                            <p className=\"quantity\">Count: {item.quantity}</p>\r\n                            <p className=\"description\">{item.desc}</p>\r\n                        </CardBody>\r\n                        <CardFooter>\r\n                            <Button color=\"primary\" onClick={() => handleUpdate(item)} block>Edit</Button>\r\n                            {activeButton}\r\n                            {deleteButton}\r\n                        </CardFooter>\r\n                    </Card>\r\n                )\r\n            } else {return null;}\r\n        }else {return null;}\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    let renderForm = isUpdate ? \r\n        <InventoryForm key={itemToUpdate._id} inventory={inventory} setInv={setInv} setUpdate={setUpdate} myItem={itemToUpdate} id={itemToUpdate._id}/>\r\n        : <InventoryForm key=\"additem\" inventory={inventory} setInv={setInv} setUpdate={setUpdate}/>\r\n    let activeBtn = displayActive ? \r\n        <Button color=\"primary\" key=\"hideAct\" onClick={() => setActive(false)} block>Hide Active</Button>\r\n        : <Button color=\"primary\" key=\"showAct\" onClick={() => setActive(true)} block>Show Active</Button>\r\n    let inactiveBtn = displayInactive ? \r\n        <Button color=\"primary\" key=\"hideIn\" onClick={() => setInactive(false)} block>Hide Inactive</Button>\r\n        : <Button color=\"primary\" key=\"showIn\" onClick={() => setInactive(true)} block>Show Inactive</Button>\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h2>Your Inventory</h2>\r\n            {renderForm}\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                {activeBtn}\r\n                {inactiveBtn}\r\n                <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default InventoryDisplay;","import React, {useState} from 'react';\r\nimport '../stylesheets/inventory.css';\r\nimport InventoryDisplay from '../components/InventoryComp/InventoryDisplay';\r\nimport NavBar from '../components/NavBar';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst Inventory = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"inventory\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <InventoryDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inventory;","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, Form, Input} from 'reactstrap';\r\nimport '../../stylesheets/profile.css';\r\n\r\nconst ProfileForm = ({updateProfile, bio, setBio, setPic, modal, toggle, user}) => {\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle} className=\"profileform\">\r\n            <ModalHeader toggle={toggle}>Edit Portfolio</ModalHeader>\r\n            <ModalBody><Form onSubmit={updateProfile}>\r\n                <Input type=\"textarea\" value={bio} onChange={({target}) => setBio(target.value)} required/>\r\n                <button type=\"button\" onClick={() => setPic(0)}>\r\n                    <img src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(1)}>\r\n                    <img src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(2)}>\r\n                    <img src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(3)}>\r\n                    <img src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>\r\n                </button>\r\n                <Button color=\"primary\" block>Update Profile</Button>\r\n            </Form></ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProfileForm;","import React, {useState, useEffect} from 'react';\r\nimport {Button, Media} from 'reactstrap';\r\nimport NavBar from '../components/NavBar'\r\nimport {isLoggedIn} from '../config/auth';\r\nimport ProfileForm from '../components/UserComp/ProfileForm';\r\n\r\nconst Profile = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());     //loggedIn returns the token if the user is logged in\r\n    const [user, setUser] = useState(\"\");\r\n    const [newBio, setBio] = useState();\r\n    const [newPic, setPic] = useState(0);\r\n    const [modalOpen, setModal] = useState(false);\r\n\r\n    const getUserInfo = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/auth/id/${loggedIn}`)\r\n        .then(response => response.json()).then(userInfo => {\r\n            setUser(userInfo); \r\n            setBio(userInfo.bio);\r\n            setPic(userInfo.pic);\r\n        })\r\n    }\r\n    const updateProfile = (event) => {\r\n        event.preventDefault();\r\n        let toUpdate = {bio: newBio, pic: newPic};\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/auth/id/${loggedIn}`, {\r\n            method: \"PATCH\",\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(toUpdate)\r\n        }).then(() => getUserInfo()).then(() => setModal(false))\r\n    }\r\n    useEffect(() => {\r\n        getUserInfo();\r\n    }, []);\r\n    const toggle = () => {setModal(!modalOpen)}\r\n\r\n    let img;\r\n    if(user.pic === 0) {img =<Media object src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>}\r\n    else if(user.pic === 1) {img =<Media object src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>}\r\n    else if(user.pic === 2) {img =<Media object src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>}\r\n    else if(user.pic === 3) {img =<Media object src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>}\r\n    return (\r\n        <div className=\"profile\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <Media>\r\n                <Media left>\r\n                    {img}\r\n                </Media>\r\n                <Media body>\r\n                    <Media heading>Welcome {user.username} to your Profile</Media>\r\n                    {user.bio}\r\n                    <Button onClick={() => setModal(true)}>Update Profile</Button>\r\n                </Media>\r\n            </Media>\r\n            <ProfileForm updateProfile={updateProfile} bio={newBio} setBio={setBio} \r\n                        user={user} setPic={setPic} modal={modalOpen} toggle={toggle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {useState, useEffect} from 'react';\r\nimport {Table} from 'reactstrap';\r\n\r\nconst CartDisplay = () => {\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [total, setTotal] = useState(0);\r\n    let cart = localStorage.getItem('Cart');\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    useEffect(() => {\r\n        getTotal();\r\n    }, [cartItems])\r\n    const getInv = () => {\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/inventory`).then(response => response.json())\r\n        .then(inv => {\r\n            let invInCart = Object.assign([], inv);\r\n            invInCart = invInCart.filter((item) => {\r\n                let keep = false;\r\n                if(cart != null) {\r\n                    let cartParsed = cart.split(\",\");\r\n                    cartParsed.forEach((itemID) => {\r\n                        if(itemID === item._id) {keep = true;}\r\n                    })\r\n                }\r\n                return keep;\r\n            })\r\n            setCartItems(invInCart);\r\n        });\r\n    }\r\n    const getTotal = () => {\r\n        let myTotal = 0;\r\n        cartItems.forEach((item) => {\r\n            myTotal = myTotal + parseFloat(item.price);\r\n        })\r\n        setTotal(myTotal);\r\n    }\r\n    const displayInv = cartItems.map((item) => {\r\n        return (\r\n            <tr key={item._id} className=\"item\">\r\n                <td className=\"itemname\">{item.name}</td>\r\n                <td>${item.price}</td>\r\n            </tr>\r\n        )\r\n    });\r\n    return (\r\n        <Table striped>\r\n        <thead><tr><th>Product Name</th><th>Price</th></tr></thead>\r\n        <tbody>\r\n            {displayInv}\r\n            <tr><td>Total</td><td>${total}</td></tr>\r\n        </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default CartDisplay;","import React, {useState} from 'react';\r\nimport '../stylesheets/inventory.css';\r\nimport NavBar from '../components/NavBar';\r\nimport CartDisplay from '../components/InventoryComp/CartDisplay'\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst Cart = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"inventory\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <h2>Cart Page</h2>\r\n            <CartDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, {useState} from 'react';\r\nimport {Form, Input, Button, Spinner} from 'reactstrap'\r\n\r\nconst SignupForm = () => {\r\n    const [username, setUserName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [pswrdconfirm, setConfirm] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [usernameTaken, setTaken] = useState(0);      //0 means not taken, 1 means username already exists in database\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg(\"\");\r\n        if(password === pswrdconfirm && usernameTaken === 0){\r\n            const isActive = true;\r\n            const bio = \"Shop user\";\r\n            const pic = 0;\r\n            const user = {username, email, password, isActive, bio, pic};\r\n            fetch(`https://shop-jpeavler.herokuapp.com/api/auth/register`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(user)\r\n            }).then(() => setUserName('')).then(() => setEmail(''))\r\n                .then(() => setPassword('')).then(() => setConfirm(''))\r\n        } else if (password !== pswrdconfirm && usernameTaken !== 0) {\r\n            setMsg(\"Username already taken and passwords must match\")\r\n        } else if(password !== pswrdconfirm) {\r\n            setMsg(\"Passwords must match\");\r\n        } else {\r\n            setMsg(\"Username already taken\")\r\n        }\r\n        setSpinner(false);\r\n    }\r\n    const handleUsername = () => {\r\n        setMsg(\"\");\r\n        fetch(`https://shop-jpeavler.herokuapp.com/api/auth/${username}`)\r\n        .then(response => response.json()).then(fetchMsg => setTaken(fetchMsg.length))\r\n        if(usernameTaken === 1) {\r\n            setMsg(\"Username already taken\");\r\n        } else {\r\n            setMsg(\"\");\r\n        }\r\n    }\r\n    let spinner;\r\n    if(displaySpinner) {spinner = <Spinner color=\"primary\"/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>\r\n            <Form className=\"signup\" onSubmit={handleSubmit}>\r\n                <Input placeholder=\"User Name\" onBlur={() => handleUsername()} onChange={({target}) => setUserName(target.value)} value={username} required/>\r\n                <Input placeholder=\"Email\" type=\"email\" onChange={({target}) => setEmail(target.value)} value={email} required/>\r\n                <Input placeholder=\"Password\" type=\"password\" onChange={({target}) => setPassword(target.value)} value={password} required/>\r\n                <Input placeholder=\"Password Confirmation\" type=\"password\" onChange={({target}) => setConfirm(target.value)} value={pswrdconfirm} required/>\r\n                <Button block>Submit</Button>\r\n                <span style={{'color': 'red'}}>{msg}</span> \r\n            </Form>\r\n            {spinner}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupForm;","import React from 'react';\r\nimport NavBar from '../components/NavBar'\r\nimport SignupForm from '../components/UserComp/SignupForm'\r\n\r\nconst Signup = () => {\r\n    return (\r\n        <div className=\"signup\">\r\n            <NavBar/>\r\n            <h2>Signup</h2>\r\n            <SignupForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n  } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Inventory from '../pages/Inventory';\r\nimport Profile from '../pages/Profile';\r\nimport Cart from '../pages/Cart';\r\nimport Signup from '../pages/Signup';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst ShopRouter = () => {\r\n    return(\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/inventory\">\r\n                        <Inventory/>  \r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path=\"/profile\">\r\n                        <Profile/>\r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path=\"/cart\">\r\n                        <Cart/>\r\n                    </PrivateRoute>\r\n                    <Route exact path=\"/signup\">\r\n                        <Signup/>\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst PrivateRoute = ({ children, ...rest}) => {\r\n    return (\r\n        <Route {...rest} render={({location}) => \r\n            isLoggedIn() ? (children) : (\r\n            <Redirect to={{pathname: '/', state: {from: location}}} />\r\n            )\r\n        }/>\r\n    )\r\n}\r\n\r\n  export default ShopRouter;","import React from 'react';\n\nimport './stylesheets/App.css'\nimport ShopRouter from './components/ShopRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShopRouter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './extras/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}